---
title: "Analyzes for Bachelor Theses"
author: "Julius Fenn"
format:
  html:
    toc: true
    toc-depth: 3
    html-math-method: katex
---


# Notes


# global variables

```{r}
## global variables: 


```



# load merged pre-processed data

```{r}
#| echo: true
#| warning: false

# sets the directory of location of this script as the current directory
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))

# load packages
require(pacman)
# regsem not needed!
p_load('tidyverse', 'jsonlite', 'magrittr', 'xlsx',
       'stargazer', 'psych', 'jtools', 'DT', 'ggstatsplot', 
       'lavaan', 'igraph',
       'regsem', 'MplusAutomation',
       'MASS')

# Rcmdr


# load data
setwd("outputs")
t12_questionnaireCAMs <- readRDS(file = "t12_questionnaireCAMs.rds")
CAMfiles <- readRDS(file = "CAMfiles.rds")
CAMdrawn <- readRDS(file = "CAMdrawn.rds")


t12_questionnaireCAMs$total_min_prolific[t12_questionnaireCAMs$total_min_prolific > 1000] <- NA


# load functions
setwd("../../functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}


setwd("../functions_CAMapp")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}
rm(i)
```


# Laras BA

```{r}
table(t12_questionnaireCAMs$country.y)
```



## compute mean variables for multi-dimensional solutions


```{r}
### eine Skala:
"mean_BiosphericValues"    
"mean_CET"  
"mean_PolicyItems"


### eine Skala:
t12_questionnaireCAMs$concernClimate1
t12_questionnaireCAMs$concernClimate2

t12_questionnaireCAMs$probabilityClimate1
t12_questionnaireCAMs$probabilityClimate2
t12_questionnaireCAMs$`Risk-1riskProb`
t12_questionnaireCAMs$`Risk-2riskProb`
t12_questionnaireCAMs$`Risk-3riskProb`
t12_questionnaireCAMs$`Risk-4riskProb`
```


```{r}


t12_questionnaireCAMs$mean_RPI <- NA
t12_questionnaireCAMs$mean_RPI[!is.na(t12_questionnaireCAMs$country.y )] <- rowMeans(t12_questionnaireCAMs[!is.na(t12_questionnaireCAMs$country.y ), str_subset(string = colnames(t12_questionnaireCAMs), pattern = "^concernClimate|^probabilityClimate|Risk-")])
```

Correlation plot:

```{r}
# items van der Linden - t12_questionnaireCAMs Values 2015
psych::cor.plot(r = cor(t12_questionnaireCAMs[, c("mean_BiosphericValues", "mean_CET", "mean_PolicyItems", "mean_RPI")], 
                                                   use = "pairwise.complete.obs"),
                                                   upper = FALSE, xlas = 2, main = "Correlation DVs")
```





```{r}
getwd()
setwd("outputs/BA_Lara")
write.csv2(x = t12_questionnaireCAMs, file = "t12_questionnaireCAMs_Lara.csv")
```






not needed

```{r}
t12_questionnaireCAMs$mean_PolicyItems_USA <- NA


t12_questionnaireCAMs$mean_PolicyItems_USA[t12_questionnaireCAMs$country.y == "USA" & !is.na(t12_questionnaireCAMs$country.y )] <- rowMeans(t12_questionnaireCAMs[t12_questionnaireCAMs$country.y == "USA" & !is.na(t12_questionnaireCAMs$country.y ), str_subset(string = colnames(t12_questionnaireCAMs), pattern = "^policyItems")])


t12_questionnaireCAMs$mean_PolicyItems_Germany26 <- NA
t12_questionnaireCAMs$mean_PolicyItems_Germany26[t12_questionnaireCAMs$country.y == "Germany" & !is.na(t12_questionnaireCAMs$country.y )] <- rowMeans(t12_questionnaireCAMs[t12_questionnaireCAMs$country.y == "Germany" & !is.na(t12_questionnaireCAMs$country.y ), c("policyItems-2", "policyItems-6")])


```


## stepwise LMs


### for mean_BiosphericValues


```{r}

dat_Germany <- t12_questionnaireCAMs[t12_questionnaireCAMs$country.y == "Germany" & !is.na(t12_questionnaireCAMs$country.y ), ]
dat_USA <- t12_questionnaireCAMs[t12_questionnaireCAMs$country.y == "USA" & !is.na(t12_questionnaireCAMs$country.y ), ]



full.model <- lm(mean_BiosphericValues ~ mean_valence_macro + density_macro + transitivity_macro, data = t12_questionnaireCAMs)
summary(full.model)


report::report(x = full.model)

### eine Skala:
"mean_BiosphericValues"    
"mean_CET"  
"mean_PolicyItems"


t12_questionnaireCAMs$mean_RPI <- NA

boxplot( t12_questionnaireCAMs$mean_BiosphericValues ~ t12_questionnaireCAMs$classes_conspiracy)



cor(t12_questionnaireCAMs$mean_BiosphericValues, t12_questionnaireCAMs$num_nodes_macro, use = "pairwise")
cor(t12_questionnaireCAMs$mean_CET, t12_questionnaireCAMs$num_nodes_macro, use = "pairwise")
cor(t12_questionnaireCAMs$mean_PolicyItems, t12_questionnaireCAMs$num_nodes_macro, use = "pairwise")
cor(t12_questionnaireCAMs$mean_RPI, t12_questionnaireCAMs$num_nodes_macro, use = "pairwise")

# stargazer::stargazer(full.model, type = "html", out = "regression.html")


# Stepwise regression model
help(stepwise)
step.model <- stepAIC(object = full.model, direction = "both",
                      trace = TRUE)
summary(step.model)

report::report(x = step.model)

### GLM
example(birthwt)
birthwt.glm <- glm(low ~ ., family = binomial, data = bwt)
birthwt.step <- stepAIC(object = birthwt.glm, direction = "both",
                        trace = TRUE)
birthwt.step$anova
summary(birthwt.step)
```




```{r}
?swiss
full.model <- lm(Fertility ~., data = swiss)
summary(full.model)


stargazer::stargazer(full.model, type = "html", out = "regression.html")


# Stepwise regression model
help(stepwise)
step.model <- stepAIC(object = full.model, direction = "both",
                      trace = TRUE)
summary(step.model)



### GLM
example(birthwt)
birthwt.glm <- glm(low ~ ., family = binomial, data = bwt)
birthwt.step <- stepAIC(object = birthwt.glm, direction = "both",
                        trace = TRUE)
birthwt.step$anova
summary(birthwt.step)
```



## policy scale


```{r}
#| echo: true
#| warning: false


regEx <- "^policyItems"
nameScale <- "Policy Scale"
nameVariable <- "mean_PolicyItems"

### number of items
sum(str_detect(string = colnames(t12_questionnaireCAMs), pattern = regEx))

### only keep values with no missing values
tmp_dat <- t12_questionnaireCAMs[, c(str_subset(string = colnames(t12_questionnaireCAMs), pattern = regEx), "country.y")]

# tmp_dat <- tmp_dat[!is.na(tmp_dat$country.y), ]
tmp_dat <- tmp_dat[tmp_dat$country.y == "Germany" & !is.na(tmp_dat$country.y), ]
cat("analyes for country/ies:\n", unique(tmp_dat$country.y), "\n")

### get correlation plot, descriptives, EFA, CFA
tmp <- CFAstats(dataset = tmp_dat, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

# ### variable mean
# questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
#   select(matches(regEx)) %>%
#   rowMeans(na.rm = TRUE)
```

