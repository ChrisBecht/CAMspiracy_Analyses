---
title: "Analyze Merged Files from t1, t2"
author: "Julius Fenn, Christophe Becht"
format:
  html:
    toc: true
    toc-depth: 3
    html-math-method: katex
---


# Notes


# global variables

```{r}
## global variables: 


```



# load merged pre-processed data

```{r}
#| echo: true
#| warning: false

# sets the directory of location of this script as the current directory
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))

# load packages
require(pacman)
# regsem not needed!
p_load('tidyverse', 'jsonlite', 'magrittr', 'xlsx',
       'stargazer', 'psych', 'jtools', 'DT', 'ggstatsplot', 
       'lavaan', 'igraph',
       'regsem', 'MplusAutomation')


# load data
setwd("outputs")
t12_questionnaireCAMs <- readRDS(file = "t12_questionnaireCAMs.rds")
CAMfiles <- readRDS(file = "CAMfiles.rds")
CAMdrawn <- readRDS(file = "CAMdrawn.rds")


t12_questionnaireCAMs$total_min_prolific[t12_questionnaireCAMs$total_min_prolific > 1000] <- NA


# load functions
setwd("../../functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}


setwd("../functions_CAMapp")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}
rm(i)
```


# Laras BA

## policy scale


```{r}
#| echo: true
#| warning: false


regEx <- "^policyItems"
nameScale <- "Policy Scale"
nameVariable <- "mean_PolicyItems"

### number of items
sum(str_detect(string = colnames(t12_questionnaireCAMs), pattern = regEx))

### only keep values with no missing values
tmp_dat <- t12_questionnaireCAMs[, c(str_subset(string = colnames(t12_questionnaireCAMs), pattern = regEx), "country.y")]

# tmp_dat <- tmp_dat[!is.na(tmp_dat$country.y), ]
tmp_dat <- tmp_dat[tmp_dat$country.y == "Germany" & !is.na(tmp_dat$country.y), ]
cat("analyes for country/ies:\n", unique(tmp_dat$country.y), "\n")

### get correlation plot, descriptives, EFA, CFA
tmp <- CFAstats(dataset = tmp_dat, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

# ### variable mean
# questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
#   select(matches(regEx)) %>%
#   rowMeans(na.rm = TRUE)
```


# Amelies BA


## split into CAMs from Germany

```{r}
setwd("outputs/BA_Amelie")
if(!file.exists("CAMs_Germany")){
  dir.create("CAMs_Germany")
}
setwd("CAMs_Germany")


CAMfiles_Germany <- CAMfiles

## check is ID data set is complete
if(!all(CAMfiles_Germany[[1]]$participantCAM %in% t12_questionnaireCAMs$PROLIFIC_PID)){
    print("Error")
}else{
  tmp_ids <- t12_questionnaireCAMs$PROLIFIC_PID[t12_questionnaireCAMs$country.x == "Germany"]
  
  ## keep only CAM data from Germany
  CAMfiles_Germany[[1]] <- CAMfiles_Germany[[1]][CAMfiles_Germany[[1]]$participantCAM %in% tmp_ids,]
  CAMfiles_Germany[[2]] <- CAMfiles_Germany[[2]][CAMfiles_Germany[[2]]$participantCAM %in% tmp_ids,]
  CAMfiles_Germany[[3]] <- CAMfiles_Germany[[3]][CAMfiles_Germany[[3]]$participantCAM.x %in% tmp_ids,]
  
  ## save files ob subsets
  vroom::vroom_write(x =  CAMfiles_Germany[[1]], file = "CAM_nodes_Germany.txt")
  vroom::vroom_write(x =  CAMfiles_Germany[[2]], file = "CAM_connectors_Germany.txt")
  vroom::vroom_write(x =  CAMfiles_Germany[[3]], file = "CAM_merged_Germany.txt")
}
```



## split into CAMs from Germany


```{r}
setwd("outputs/BA_Amelie")
if(!file.exists("CAMs_USA")){
  dir.create("CAMs_USA")
}
setwd("CAMs_USA")


CAMfiles_USA <- CAMfiles

## check is ID data set is complete
if(!all(CAMfiles_USA[[1]]$participantCAM %in% t12_questionnaireCAMs$PROLIFIC_PID)){
    print("Error")
}else{
  tmp_ids <- t12_questionnaireCAMs$PROLIFIC_PID[t12_questionnaireCAMs$country.x == "USA"]
  
  ## keep only CAM data from Germany
  CAMfiles_USA[[1]] <- CAMfiles_USA[[1]][CAMfiles_USA[[1]]$participantCAM %in% tmp_ids,]
  CAMfiles_USA[[2]] <- CAMfiles_USA[[2]][CAMfiles_USA[[2]]$participantCAM %in% tmp_ids,]
  CAMfiles_USA[[3]] <- CAMfiles_USA[[3]][CAMfiles_USA[[3]]$participantCAM.x %in% tmp_ids,]
  
  ## save files ob subsets
  vroom::vroom_write(x =  CAMfiles_USA[[1]], file = "CAM_nodes_USA.txt")
  vroom::vroom_write(x =  CAMfiles_USA[[2]], file = "CAM_connectors_USA.txt")
  vroom::vroom_write(x =  CAMfiles_USA[[3]], file = "CAM_merged_USA.txt")
}
```

# Magdalenas BA

## get the first 8 concepts drawn in CAMs


```{r}
#| echo: true
#| warning: false


### only keep t2
tmp_dat <- t12_questionnaireCAMs[!is.na(t12_questionnaireCAMs$country.y), ]


affectiveImagery_CAMs <- tmp_dat[, c("PROLIFIC_PID", "country.y", "classes_conspiracy", "politicalParty", "socio_sex",
  "mean_affImg", "mean_valence_macro", "num_nodes_macro",
  str_subset(string = colnames(tmp_dat), pattern = "^R[:digit:]"), 
  sort(str_subset(string = colnames(tmp_dat), pattern = "^affImg")))]
sum(is.na(affectiveImagery_CAMs$mean_affImg))

affectiveImagery_CAMs[, paste0("A", 1:8)] <- NA

for(i in 1:nrow(tmp_dat)){
  tmp_concepts <- CAMfiles[[1]][CAMfiles[[1]]$participantCAM == tmp_dat$PROLIFIC_PID[i],]
  tmp_concepts <- tmp_concepts$text[order(tmp_concepts$date, decreasing = FALSE)][2:9]
  
  affectiveImagery_CAMs[i, str_subset(string = colnames(affectiveImagery_CAMs), pattern = "^A")] <- tmp_concepts
}

### save data set
setwd("outputs/BA_Magdalena")
if(!file.exists("data_AffImg_CAMs")){
  dir.create("data_AffImg_CAMs")
}
setwd("data_AffImg_CAMs")

## save as .xlsx file
xlsx::write.xlsx2(x = affectiveImagery_CAMs, file = "affectiveImagery_CAMs.xlsx")
## save as .csv file
write.csv2(x = affectiveImagery_CAMs, file = "affectiveImagery_CAMs.csv")
## save as R object
saveRDS(affectiveImagery_CAMs, file = "affectiveImagery_CAMs.rds")
```

## clean affective imagery


create relevant subset:

```{r}
#| echo: true
#| warning: false

affectiveImagery <- t12_questionnaireCAMs[, c("PROLIFIC_PID", "country.x", "classes_conspiracy", "politicalParty", "socio_sex",
  "mean_affImg",
  str_subset(string = colnames(tmp_dat), pattern = "^R[:digit:]"), 
  sort(str_subset(string = colnames(tmp_dat), pattern = "^affImg")))]
sum(is.na(affectiveImagery$mean_affImg))
```


use approximate matching only for German:

```{r}
#| eval: false


subset_affectiveImagery <- affectiveImagery[affectiveImagery$country.x == "Germany",]

tmp_vec <- unlist(subset_affectiveImagery[, str_subset(string = colnames(tmp_dat), pattern = "^R[:digit:]")])
tmp_vec <- tmp_vec[!is.na(tmp_vec)]

applyApproximate <- data.frame(originalWord = tmp_vec, summarizedWord = tmp_vec)


rm(subset_affectiveImagery); rm(tmp_vec)

length(applyApproximate$originalWord)
length(unique(applyApproximate$originalWord))
names(table(applyApproximate$originalWord))[table(applyApproximate$originalWord) >= 10]


readkey <- function()
{
  # cat ('\nPress [enter] to continue\n')
  # cat('or write "aaa" in the console to terminate loop\n')

  line <- readline()
  if(line == "a123"){
    cat("for loop terminated, please write down the last round where you have summarized words:",
        i, "\n")
    stop("process terminated")
  }else{
    return(line)
  }
}

defineDistance = 2

for(i in 1:nrow(applyApproximate)){
  print(i)
  
  dist <- stringdist::stringdist(a = applyApproximate$summarizedWord[i], applyApproximate$summarizedWord)


  
if(!all(unique(applyApproximate$summarizedWord[dist <= defineDistance]) == applyApproximate$summarizedWord[i])){
  
  cat("\n if you want to summarize the followings words:\n")
  print(unique(applyApproximate$summarizedWord[dist <= defineDistance]))
  
  cat('>>> provide a superordinate word, else write "c" (for continue) or write "a123" to stop the summary process')

 
  out <- readkey() 
  # print(out)
  
  if(out != "c"){
      applyApproximate$summarizedWord[applyApproximate$summarizedWord %in% unique(applyApproximate$summarizedWord[dist <= defineDistance])] <- out
  }
}
}


### save data set
setwd("outputs/BA_Magdalena")
if(!file.exists("data")){
  dir.create("data_AffImg")
}
setwd("data_AffImg")

## save as .xlsx file
xlsx::write.xlsx2(x = applyApproximate, file = "applyApproximate.xlsx")
## save as .csv file
write.csv2(x = applyApproximate, file = "applyApproximate.csv")
## save as R object
saveRDS(applyApproximate, file = "applyApproximate.rds")
```

